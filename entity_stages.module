<?php

/**
 * @file
 * Entity Stages Module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Site\Settings;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_base_field_info().
 */
function entity_stages_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'node') {
    // TODO: Use this field as a exposed or not filter to avoid
    // Repeatly ask for approval on same content. Another solution is to pass
    // Revision UID to Administrator if refused, not optimal solutional though.
    $fields['entity_stages_validation_state'] = BaseFieldDefinition::create('string')
      ->setComputed(TRUE);
    return $fields;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function entity_stages_theme_registry_alter(&$theme_registry) {
  // Moderate Content.
  $theme_registry['views_view_table__entity_stages'] = $theme_registry['views_view_table'];
  // $theme_registry['views_view_table__entity_stages']['template'] = 'views-view-table--entity-stages';
  // $theme_registry['views_view_table__entity_stages']['path'] = 'src/Template/views';.
  $theme_registry['views_view_table__entity_stages']['preprocess functions'][] = 'entity_stages_preprocess_views_view_table';
}

/**
 * Implements entity_stages_preprocess_views_view_table().
 */
function entity_stages_preprocess_views_view_table(&$variables) {
  // Register preprocess only if no page Entity Stage.
  $getRoute = \Drupal::request()->get('_route');

  // Get view.
  $view = $variables['view'];

  // Foreach row add uid and role to validate to easy data access.
  if ($view && $view->result && $getRoute == 'view.entity_stages.default_page') {
    foreach ($variables['rows'] as $key => &$row) {
      // Get comparable revisions values.
      $revisionEntity = $view->result[$key]->_entity;
      $nodeLoad = Node::load($revisionEntity->id());

      // Create Operation URLs.
      $urlCompare = Url::fromRoute(
       'diff.revisions_diff',
       [
         'node' => $nodeLoad->id(),
         'left_revision' => $nodeLoad->getRevisionId(),
         'right_revision' => $revisionEntity->getRevisionId(),
         'filter' => 'split_fields',
       ],
       ['absolute' => TRUE]
      )->toString();

      // Open page.
      $pageUrl = Url::fromRoute(
       'entity.node.canonical',
       ['node' => $nodeLoad->id()],
       ['absolute' => TRUE]
      )->toString();

      // Accepter revision/modification.
      $acceptRevision = Url::fromRoute(
      'node.revision_revert_confirm',
      [
        'node' => $nodeLoad->id(),
        'node_revision' => $revisionEntity->getRevisionId(),
      ],
      ['absolute' => TRUE]
      )->toString();

      // Refuser revision/modification.
      $refuserRevision = Url::fromRoute(
      'node.revision_delete_confirm',
      [
        'node' => $nodeLoad->id(),
        'node_revision' => $revisionEntity->getRevisionId(),
      ],
      ['absolute' => TRUE]
      )->toString();

      // Add Node type to Type column.
      $row['columns']['nothing']['content'][0]['field_output']['#markup'] = $nodeLoad->getType();

      // Add return page.
      $contentModerationPage = '?destination=' . Url::fromRoute(
        'view.entity_stages.default_page', [], ['absolute' => TRUE]
      )->toString();

      // Publish button.
      $publishButton = Url::fromRoute(
      'entity_stages.publish.content',
      ['entity_id' => $nodeLoad->id()],
      ['absolute' => TRUE]
      )->toString();

      // Add links.
      $linksStructure = [];
      $linksOutput = '';

      // Conditions.
      $conditionPublished = $nodeLoad->isPublished();
      $conditionCurrent = $revisionEntity->isDefaultRevision();
      $conditionCurrentPublished = !$conditionPublished && $conditionCurrent;

      // Link structures.
      $linksStructure['publish'] = [
        'target' => 'normal',
        'enabled' => $conditionCurrentPublished,
        'label' => t('Publish'),
        'url' => $publishButton,
      ];
      $linksStructure['diff'] = [
        'target' => '_blank',
        'enabled' => !$conditionCurrentPublished,
        'label' => t('Difference'),
        'url' => $urlCompare,
      ];
      $linksStructure['view'] = [
        'target' => 'normal',
        'enabled' => 1,
        'label' => t('View'),
        'url' => $pageUrl,
      ];
      $linksStructure['accept'] = [
        'target' => 'normal',
        'enabled' => !$conditionCurrentPublished,
        'label' => t('Accept'),
        'url' => $acceptRevision . $contentModerationPage,
      ];
      $linksStructure['reject'] = [
        'target' => 'normal',
        'enabled' => !$conditionCurrentPublished,
        'label' => t('Reject'),
        'url' => $refuserRevision . $contentModerationPage,
      ];

      foreach ($linksStructure as $key => $value) {
        if ($value['enabled']) {
          $linksOutput .= '<li><a href="' . $value['url'] . '" target="' . $value['target'] . '">' . $value['label'] . '</a></li>';
        }
      }

      // Add route to accept and refuse.
      $row['columns']['dropbutton']['content'][0]['field_output']['#markup'] =
         '<div class="dropbutton-wrapper">
           <div class="dropbutton-widget">
             <ul class="dropbutton">
               ' . $linksOutput . '
             </ul>
           </div>
         </div>';
    }
  }
}

/**
 * Implements hook_views_post_execute().
 */
function entity_stages_views_post_execute(ViewExecutable $view) {
  // Alter only the post query of this view.
  if ($view->storage->get('id') == 'entity_stages') {
    // Filter results before pre render.
    foreach ($view->result as $index => $result) {
      // If some condtions are met ignore the result.
      if (!$result->_entity) {
        unset($view->result[$index]);
        continue;
      }

      // Load entities.
      $nodeLoad = Node::load($result->_entity->nid->value);
      $userLoad = User::load($nodeLoad->uid->target_id);
      $isAdmin = $userLoad->hasRole('administrator');
      $revisionIsOlderThanCurrent = $result->_entity->changed->value < $nodeLoad->changed->value;

      // If some condtions are met ignore the result.
      if (
        $result->_entity->isDefaultRevision() && $nodeLoad->isPublished() ||
        $revisionIsOlderThanCurrent ||
        $isAdmin
      ) {
        unset($view->result[$index]);
      }
    }

    // Update rows number and pager.
    // $view->pager->setItemsPerPage(1000);.
    $nbRows = count($view->result);
    $view->total_items = $nbRows;
    $view->pager->total_items = $nbRows;
    $view->pager->updatePageInfo();
    $view->query->view->pager->total_items = $nbRows;
    $view->query->view->pager->updatePageInfo();
  }
}

/**
 * Implements hook_views_query_alter().
 */
function entity_stages_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  $settings = Settings::getAll();
  $currentUser = \Drupal::currentUser();
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function entity_stages_menu_local_tasks_alter(&$data, $route_name) {
  // Add Entity Stages task.
  $data['tabs'][0][] = [
    '#theme' => 'menu_local_task',
    '#active' => $route_name == 'view.entity_stages.default_page',
    '#link' => [
      'title' => t('Entity stages'),
      'url' => Url::fromRoute(
        'view.entity_stages.default_page',
        [],
        ['absolute' => TRUE]
      ),
    ],
  ];
}

/**
 * Implements hook_node_presave().
 */
function entity_stages_node_presave(Node $node) {
  // Current User.
  $loadCurrentUser = User::load(\Drupal::currentUser()->id());
  $requireValidation =
  !$loadCurrentUser->hasRole('administrator') &&
  !$loadCurrentUser->hasPermission('publish entity stages');

  // If User hasnt permission to publish or modify without validation
  // the content status is either unpublished or
  // published and waiting for validation.
  if ($requireValidation) {
    // If new starts as unpublished.
    if ($node->isNew()) {
      $node->set('status', 0);
    }
    // Else keep current revision.
    else {
      $node->set('status', $node->original->isPublished());
      $node->isDefaultRevision(FALSE);
      $node->original->isDefaultRevision(TRUE);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function entity_stages_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Alter redirection to return to entity stages validation page.
  if (
    $form_id == 'node_revision_revert_confirm' ||
    $form_id == 'node_revision_delete_confirm'
  ) {
    $form['#after_build'][] = '_redirect_to_moderation_entity_stages_page';
    $form['#submit'][] = '_redirect_to_moderation_entity_stages_page';
  }
}

/**
 * Alter default form redirection.
 */
function _redirect_to_moderation_entity_stages_page($form, FormStateInterface $form_state) {
  if ($getDestination = $_GET['destination']) {
    $submitLabel = $form['#form_id'] == 'node_revision_revert_confirm' ? t('Accept') : t('Reject');
    $form_state->setRedirectUrl(Url::fromUri($getDestination));
    $form['actions']['submit']['#value'] = $submitLabel;
    $form['actions']['cancel']['#url'] = Url::fromUri($getDestination);
  }
  return $form;
}
